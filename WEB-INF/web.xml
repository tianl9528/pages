<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	version="2.5">
	
    <display-name>广东省专业镇</display-name>
	<description>gdzyzmmv2.0</description>
	
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>App.root</param-value>
	</context-param>

	<!-- Spring ApplicationContext配置文件的路径,可使用通配符,多个路径用,号分隔 此参数用于后面的Spring Context 
		Loader -->
	<!-- 自动加载所有此命名规则的spring配置文件 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/spring/spring-core.xml
		</param-value>
	</context-param>

	<!--由Spring载入的Log4j配置文件位置，如果不设置， 系统自动找/WEB-INF/classes下的log4j.properties文件 -->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/log4j.properties</param-value>
	</context-param>

	<!--Spring默认刷新Log4j配置文件的间隔,单位为millisecond -->
	<context-param>
		<param-name>log4jRefreshInterval</param-name>
		<param-value>60000</param-value>
	</context-param>

	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>

	<!--Spring ApplicationContext 载入 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Spring 刷新Introspector防止内存泄露 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>

	<!-- CXF Servlet 配置 -->
	<servlet>
		<servlet-name>CXFServlet</servlet-name>
		<servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>CXFServlet</servlet-name>
		<url-pattern>/services/*</url-pattern>
	</servlet-mapping>

	<!-- Content Servlet 配置 -->
	<!-- 下载用Servlet -->
	<servlet>
		<servlet-name>StaticContentServlet</servlet-name>
		<servlet-class>sunit.util.web.StaticContentServlet</servlet-class>
	</servlet>
	<servlet>
		<servlet-name>RemoteContentServlet</servlet-name>
		<servlet-class>sunit.util.web.RemoteContentServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>StaticContentServlet</servlet-name>
		<url-pattern>/static-content</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>RemoteContentServlet</servlet-name>
		<url-pattern>/remote-content</url-pattern>
	</servlet-mapping>

	<servlet>
		<servlet-name>proxool</servlet-name>
		<servlet-class>sunit.database.proxool.AdminServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>proxool</servlet-name>
		<url-pattern>/dbAdmin/</url-pattern>
	</servlet-mapping>

	<!-- clickstream配置  by cyq 2015-5-9   -->
	
	<filter>
		<filter-name>clickstream</filter-name>
		<filter-class>
			com.opensymphony.clickstream.ClickstreamFilter
		</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>clickstream</filter-name>
		<url-pattern>*.jsp</url-pattern>
	</filter-mapping>
		<filter-mapping>
		<filter-name>clickstream</filter-name>
		<url-pattern>*.html</url-pattern>
	</filter-mapping>
		<filter-mapping>
		<filter-name>clickstream</filter-name>
		<url-pattern>*.htm</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>clickstream</filter-name>
		<url-pattern>*.action</url-pattern>
	</filter-mapping>
	
	<listener>
		<listener-class>
			com.opensymphony.clickstream.ClickstreamListener
		</listener-class>
	</listener>
	
	<!-- clickstream 配置结束 -->	
	
	<!-- Filter 定义 -->
	<!-- Character Encoding filter -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<!-- Filter 映射 -->
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
	</filter-mapping>

	<!-- session管理的过滤器 用于懒加载 -->
	<!-- 它一定要在struts2的过滤器之前。因为web.xml文件的过滤器执行是有顺序的。而session一定在前面进行。 -->
	<filter>
		<filter-name>hibernateOpenSessionInViewFilter</filter-name>
		<filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>
		<init-param>
			<param-name>singleSession</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>flushMode</param-name>
			<param-value>AUTO</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>hibernateOpenSessionInViewFilter</filter-name>
		<url-pattern>*.action</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
	</filter-mapping>
	<filter-mapping>
		<filter-name>hibernateOpenSessionInViewFilter</filter-name>
		<url-pattern>/j_spring_security_check</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>hibernateOpenSessionInViewFilter</filter-name>
		<url-pattern>/common/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
	</filter-mapping>

	<!-- UrlRewrite filter -->
	<!-- <filter> <filter-name>urlRewriteFilter</filter-name> <filter-class>org.tuckey.web.filters.urlrewrite.UrlRewriteFilter</filter-class> 
		</filter> <filter-mapping> <filter-name>urlRewriteFilter</filter-name> <url-pattern>/*</url-pattern> 
		<dispatcher>REQUEST</dispatcher> <dispatcher>FORWARD</dispatcher> </filter-mapping> -->

	<filter>
		<filter-name>Security Filter</filter-name>
		<filter-class>sunit.accesscontrol.SecurityFilter_Project</filter-class>
		<init-param>
			<param-name>config-file</param-name>
			<param-value>/WEB-INF/securityfilter-config.xml</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>Security Filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- 封套管理 -->
	<filter>
		<filter-name>sitemesh</filter-name>
		<filter-class>com.opensymphony.module.sitemesh.filter.PageFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>sitemesh</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

<!-- Struts2 filter -->
<filter>
        <filter-name>struts-prepare</filter-name>
        <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareFilter</filter-class>
    </filter>

    <filter>
        <filter-name>struts-execute</filter-name>
        <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsExecuteFilter</filter-class>
    </filter>

<filter-mapping>
        <filter-name>struts-prepare</filter-name>
        <url-pattern>*.action</url-pattern>
<dispatcher>REQUEST</dispatcher>
<dispatcher>FORWARD</dispatcher>
    </filter-mapping>

    <filter-mapping>
        <filter-name>struts-execute</filter-name>
        <url-pattern>*.action</url-pattern>
<dispatcher>REQUEST</dispatcher>
<dispatcher>FORWARD</dispatcher>
    </filter-mapping>

	<!-- Response Header Added Filter -->
	<!-- 为Response设置Expires等Header的Filter. -->
	<filter>
		<filter-name>cacheControlHeaderFilter</filter-name>
		<filter-class>sunit.util.web.CacheControlHeaderFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>cacheControlHeaderFilter</filter-name>
		<url-pattern>/themes/images/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>cacheControlHeaderFilter</filter-name>
		<url-pattern>/scripts/*</url-pattern>
	</filter-mapping>
	

	
	<!--proxool -->
	<!-- <servlet> <servlet-name>proxoolServletConfigurator</servlet-name> <servlet-class>org.logicalcobwebs.proxool.configuration.ServletConfigurator</servlet-class> 
		<init-param> <param-name>xmlFile</param-name> <param-value>WEB-INF/proxool.xml</param-value> 
		</init-param> <load-on-startup>1</load-on-startup> </servlet> -->

	<!-- FCKeditor -->
	<servlet>
		<servlet-name>ConnectorServlet</servlet-name>
		<servlet-class>net.fckeditor.connector.ConnectorServlet</servlet-class>
		<load-on-startup>9</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>ConnectorServlet</servlet-name>
		<!-- Do not wrap this line otherwise Glassfish will fail to load this file -->
		<url-pattern>/fckeditor/editor/filemanager/connectors/*</url-pattern>
	</servlet-mapping>

	<!-- Jersey Servlet 配置 -->
	<servlet>
		<servlet-name>JerseyServlet</servlet-name>
		<servlet-class>com.sun.jersey.spi.spring.container.servlet.SpringServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>JerseyServlet</servlet-name>
		<url-pattern>/rs/*</url-pattern>
	</servlet-mapping>

	<servlet>
		<servlet-name>DisplayChart</servlet-name>
		<servlet-class>org.jfree.chart.servlet.DisplayChart</servlet-class>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>DisplayChart</servlet-name>
		<url-pattern>/servlet/DisplayChart</url-pattern>
	</servlet-mapping>

	<mime-mapping>
		<extension>xml</extension>
		<mime-type>text/xml</mime-type>
	</mime-mapping>
	
	<mime-mapping> 
    <extension>swf</extension> 
    <mime-type>application/x-shockwave-flash</mime-type> 
  	</mime-mapping>

	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>

	<!-- session-config 单位：分钟 不定义默认为30分钟 -->
	<session-config>
		<session-timeout>480</session-timeout>
	</session-config>

	<!-- 出错页面定义 -->
	<error-page>
		<error-code>404</error-code>
		<location>/WEB-INF/content/404.jsp</location>
	</error-page>
</web-app>